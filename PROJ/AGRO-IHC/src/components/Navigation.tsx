/**
 * Componente de Navegaci√≥n Principal
 * ETAPA 3: DESARROLLO PROTOTIPO - Dise√±o men√∫ con par√°metros de usabilidad
 * ISO 9241-210: Dise√±o centrado en el usuario
 * 
 * Par√°metros de usabilidad implementados:
 * - Navegaci√≥n clara y consistente
 * - Feedback visual al hover y selecci√≥n
 * - Accesibilidad con ARIA labels
 * - Responsive design para dispositivos m√≥viles
 * - Contraste de colores adecuado
 */

import { useState } from 'react';
import type { MenuOption } from '../types';
import { useAuth } from '../context/AuthContext';
import LoginModal from './LoginModal';
import './Navigation.css';

interface NavigationProps {
  currentPage: MenuOption;
  onNavigate: (page: MenuOption) => void;
}

export default function Navigation({ currentPage, onNavigate }: NavigationProps) {
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);
  const [showLoginModal, setShowLoginModal] = useState(false);
  const { user, logout, isAuthenticated } = useAuth();

  const menuItems: { key: MenuOption; label: string; icon: string }[] = [
    { key: 'home', label: 'Inicio', icon: 'üè†' },
    { key: 'producers', label: 'Productores', icon: 'üë®‚Äçüåæ' },
    { key: 'fairs', label: 'Ferias', icon: 'üé™' },
    { key: 'registrations', label: 'Inscripciones', icon: 'üìù' },
    { key: 'transport', label: 'Transporte', icon: 'üöö' },
    { key: 'sales', label: 'Ventas', icon: 'üí∞' },
    { key: 'reports', label: 'Reportes', icon: 'üìä' },
  ];

  // Opciones solo para admin
  const adminMenuItems: { key: MenuOption; label: string; icon: string }[] = [
    { key: 'edit-home', label: 'Editar Inicio', icon: '‚úèÔ∏è' },
  ];

  const handleNavigation = (page: MenuOption) => {
    // Si no est√° autenticado y hace clic en algo diferente de "Inicio", mostrar login
    if (!isAuthenticated && page !== 'home') {
      setShowLoginModal(true);
      setIsMobileMenuOpen(false);
      return;
    }
    
    onNavigate(page);
    setIsMobileMenuOpen(false);
  };

  const toggleMobileMenu = () => {
    setIsMobileMenuOpen(!isMobileMenuOpen);
  };

  const handleLogout = () => {
    if (window.confirm('¬øEst√° seguro que desea cerrar sesi√≥n?')) {
      logout();
      setIsMobileMenuOpen(false);
      onNavigate('home'); // Volver al inicio
    }
  };

  const handleLoginClick = () => {
    setShowLoginModal(true);
    setIsMobileMenuOpen(false);
  };

  return (
    <>
      <nav className="navigation" role="navigation" aria-label="Navegaci√≥n principal">
        <div className="nav-container">
          <div className="nav-header">
            <h1 className="nav-logo">
              <span className="logo-icon">üåæ</span>
              AgroFeria
            </h1>
            
            {/* Bot√≥n men√∫ m√≥vil - REQUISITO: Dise√±o responsive */}
            <button
              className={`mobile-menu-toggle ${isMobileMenuOpen ? 'active' : ''}`}
              onClick={toggleMobileMenu}
              aria-label="Abrir men√∫ de navegaci√≥n"
              aria-expanded={isMobileMenuOpen}
            >
              <span className="hamburger-line"></span>
              <span className="hamburger-line"></span>
              <span className="hamburger-line"></span>
            </button>
          </div>

          {/* Men√∫ principal - REQUISITO: Navegaci√≥n clara */}
          <ul className={`nav-menu ${isMobileMenuOpen ? 'mobile-open' : ''}`}>
            {menuItems.map((item) => {
              // Solo mostrar "Inicio" si no est√° autenticado
              if (!isAuthenticated && item.key !== 'home') {
                return null;
              }
              
              return (
                <li key={item.key} className="nav-item">
                  <button
                    className={`nav-link ${currentPage === item.key ? 'active' : ''}`}
                    onClick={() => handleNavigation(item.key)}
                    aria-current={currentPage === item.key ? 'page' : undefined}
                    title={item.label}
                  >
                    <span className="nav-icon" aria-hidden="true">
                      {item.icon}
                    </span>
                    <span className="nav-label">{item.label}</span>
                  </button>
                </li>
              );
            })}
            
            {/* Opciones de administrador */}
            {isAuthenticated && user?.username === 'admin' && adminMenuItems.map((item) => (
              <li key={item.key} className="nav-item">
                <button
                  className={`nav-link nav-admin ${currentPage === item.key ? 'active' : ''}`}
                  onClick={() => handleNavigation(item.key)}
                  aria-current={currentPage === item.key ? 'page' : undefined}
                  title={item.label}
                >
                  <span className="nav-icon" aria-hidden="true">
                    {item.icon}
                  </span>
                  <span className="nav-label">{item.label}</span>
                </button>
              </li>
            ))}
            
            {/* Si est√° autenticado, mostrar usuario y logout */}
            {isAuthenticated && (
              <>
                {/* Separador */}
                <li className="nav-divider" role="separator"></li>
                
                {/* Usuario */}
                <li className="nav-item nav-user-item">
                  <div className="nav-user-info">
                    <span className="nav-user-icon" aria-hidden="true">üë§</span>
                    <span className="nav-user-name">{user?.username}</span>
                  </div>
                </li>
                
                {/* Logout */}
                <li className="nav-item">
                  <button
                    className="nav-link nav-logout"
                    onClick={handleLogout}
                    title="Cerrar sesi√≥n"
                  >
                    <span className="nav-icon" aria-hidden="true">üö™</span>
                    <span className="nav-label">Salir</span>
                  </button>
                </li>
              </>
            )}
            
            {/* Si no est√° autenticado, mostrar bot√≥n de Login */}
            {!isAuthenticated && (
              <>
                <li className="nav-divider" role="separator"></li>
                <li className="nav-item">
                  <button
                    className="nav-link nav-login"
                    onClick={handleLoginClick}
                    title="Iniciar sesi√≥n"
                  >
                    <span className="nav-icon" aria-hidden="true">üîê</span>
                    <span className="nav-label">Iniciar Sesi√≥n</span>
                  </button>
                </li>
              </>
            )}
          </ul>
        </div>
      </nav>

      {/* Modal de Login */}
      <LoginModal isOpen={showLoginModal} onClose={() => setShowLoginModal(false)} />
    </>
  );
}
